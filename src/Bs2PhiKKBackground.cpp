// THIS .cpp FILE IS GENERATED BY A SCRIPT, SO CHANGES WILL BE LOST
#include "Bs2PhiKKBackground.h"
#include <gsl/gsl_sf_legendre.h>
#include <cmath>
#include <iostream>
using std::cout;
using std::endl;
Bs2PhiKKBackground::Bs2PhiKKBackground()
{
  createcoefficients();
}
Bs2PhiKKBackground::Bs2PhiKKBackground(const Bs2PhiKKBackground& copy)
{
  createcoefficients();
}
Bs2PhiKKBackground::~Bs2PhiKKBackground()
{
  for ( int l = 0; l < l_max; l++ )
  {
    for ( int i = 0; i < i_max; i++ )
    {
      for ( int k = 0; k < k_max; k++ )
      {
        delete c[l][i][k];
      }
      delete c[l][i];
    }
    delete c[l];
  }
  delete c;
}
double Bs2PhiKKBackground::Evaluate(double mKK, double phi, double ctheta_1, double ctheta_2)
{
  double background = 0;
  double mKK_mapped = (mKK - mKK_min) / (mKK_max - mKK_min)*2 - 1;
  double Q_l = 0;
  double P_i = 0;
  double Y_jk = 0;
  for ( int l = 0; l < l_max; l++ )
  {
    for ( int i = 0; i < i_max; i++ )
    {
      for ( int k = 0; k < k_max; k++ )
      {
        for ( int j = 0; j < j_max; j++ )
        {
          if (j < k) continue; // must have l >= k
          Q_l  = gsl_sf_legendre_Pl   (l,  mKK_mapped);
          P_i  = gsl_sf_legendre_Pl   (i,  ctheta_2);
          // only consider case where k >= 0
          // these are the real valued spherical harmonics
          if ( k == 0 ) Y_jk =       gsl_sf_legendre_sphPlm (j, k, ctheta_1);
          else      Y_jk = sqrt(2) * gsl_sf_legendre_sphPlm (j, k, ctheta_1) * cos(k*phi);
          background += c[l][i][k][j]*(Q_l * P_i * Y_jk);
        }
      }
    }
  }
  return background;
}
//BEGIN CONSTANTS---------------------------------------------------------------
double Bs2PhiKKBackground::mKK_min = 988;
double Bs2PhiKKBackground::mKK_max = 1800;
int Bs2PhiKKBackground::l_max = 7;
int Bs2PhiKKBackground::i_max = 7;
int Bs2PhiKKBackground::k_max = 3;
int Bs2PhiKKBackground::j_max = 3;
//END CONSTANTS-----------------------------------------------------------------
void Bs2PhiKKBackground::createcoefficients()
{
//BEGIN CODE--------------------------------------------------------------------
//double**** c;
c = new double***[l_max];
for ( int l = 0; l < l_max; l++ )
{
  c[l] = new double**[i_max];
  for ( int i = 0; i < i_max; i++ )
  {
    c[l][i] = new double*[k_max];
    for ( int k = 0; k < k_max; k++ )
    {
      c[l][i][k] = new double[j_max];
      for ( int j = 0; j < j_max; j++ )
      {
        c[l][i][k][j] = 0;
      }
    }
  }
}
c[0][0][0][0] = 0.070524;// +- 0.000000
c[0][1][1][2] = 0.045890;// +- 0.002969
c[1][0][0][0] = -0.035011;// +- 0.003343
//END CODE----------------------------------------------------------------------
}
